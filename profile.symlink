# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.

# set terminal style
if [ ! -z "$BASH_VERSION" ]; then
    PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$(git branch 2> /dev/null | sed -e "/^[^*]/d" -e "s/* \(.*\)/ (\1)/") \$ '
fi

# set user id environment variable
if [ -z "$UID" ]; then
    UID="$(id -u)"
fi
export UID

# set group id environment variable
if [ -z "$GID" ]; then
    GID=$(id -g)
fi
export GID

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ]; then
    PATH="$HOME/bin:$PATH"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/.local/bin" ]; then
    PATH="$HOME/.local/bin:$PATH"
fi

# set PATH so it includes golang's bin
if [ -d "/usr/local/go/bin" ]; then
    PATH="/usr/local/go/bin:$PATH"
fi

GOPATH=$(go env GOPATH)
# set PATH so it includes golang's user bin
if [ -d "$GOPATH/bin" ]; then
    PATH="$GOPATH/bin:$PATH"
fi

# set PATH so it includes user's cargo bin if it exists
if [ -d "$HOME/.cargo/bin" ]; then
    PATH="$HOME/.cargo/bin:$PATH"
fi

# set PATH so it includes user's yarn bin if it exists
if [ -d "$HOME/.yarn/bin" ]; then
    PATH="$HOME/.yarn/bin:$PATH"
fi

# set PATH so it includes user's symfony bin directory if it exists
if [ -d "$HOME/.symfony/bin" ]; then
   PATH="$HOME/.symfony/bin:$PATH"
fi

# set bash aliases
if [ -f ~/.aliases ]; then
    . ~/.aliases
fi

# set bash functions
if [ -f ~/.functions ]; then
    . ~/.functions
fi

# set local profile
if [ -f ~/.profile.local ]; then
    . ~/.profile.local
fi

# Set Editor to nvim
alias vim='nvim'
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vi'
else
  export EDITOR='nvim'
fi

## Docker Settings

# enable buildkit
export DOCKER_BUILDKIT=1

# use docker cli command to build with docker-compose -> buildkit
export COMPOSE_DOCKER_CLI_BUILD=1

# automatically set docker host if lima-vm is running
if [ -x "$(command -v limactl)" ]; then
  source <(limactl completion bash)
  lima_docker_vm=$(limactl list --json | jq -r 'select(.message | contains("docker"))|.name')
  if [ ! -z "$lima_docker_vm" ]; then
    export DOCKER_HOST=$(limactl list $lima_docker_vm --format 'unix://{{.Dir}}/sock/docker.sock')
  fi
fi

## Github CLI

# Autocompletion
if [ -x "$(command -v gh)" ]; then
  eval "$(gh completion -s bash)"
fi

## GPG Settings

gpgconf --launch gpg-agent 
export GPG_TTY=$(tty)
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)

## Default Node.js Settings
export NODE_OPTIONS="--experimental-json-modules"
