# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.

# set user id environment variable
if [ -z "$UID" ]; then
    UID="$(id -u)"
fi
export UID

# set group id environment variable
if [ -z "$GID" ]; then
    GID=$(id -g)
fi
export GID

# Fix brew on MacOS
if [ ! -x "$(command -v brew)" ] && [ -x "/opt/homebrew/bin/brew" ]; then
    eval $(/opt/homebrew/bin/brew shellenv)
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ]; then
    PATH="$HOME/bin:$PATH"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/.local/bin" ]; then
    PATH="$HOME/.local/bin:$PATH"
fi

# set PATH so it includes pnpm home
export PNPM_HOME="$HOME/.local/share/pnpm"
if [ -d "$HOME/.local/share/pnpm" ]; then
    PATH="$HOME/.local/share/pnpm:$PATH"
fi

# set PATH so it includes golang's bin
if [ -d "/usr/local/go/bin" ]; then
    PATH="/usr/local/go/bin:$PATH"
fi

if [[ "$(uname -s)" == "Darwin" ]]; then
    export GOPATH="$HOME/Projects/Go"
elif [[ "$(uname -s)" == "Linux" ]]; then
    export GOPATH="$HOME/Developer/go"
fi

GOPATH=$(go env GOPATH)
# set PATH so it includes golang's user bin
if [ -d "$GOPATH/bin" ]; then
    PATH="$GOPATH/bin:$PATH"
fi

# set PATH so it includes user's cargo bin if it exists
if [ -d "$HOME/.cargo/bin" ]; then
    PATH="$HOME/.cargo/bin:$PATH"
fi

# set PATH so it includes user's yarn bin if it exists
if [ -d "$HOME/.yarn/bin" ]; then
    PATH="$HOME/.yarn/bin:$PATH"
fi

# set PATH so it includes user's symfony bin directory if it exists
if [ -d "$HOME/.symfony/bin" ]; then
    PATH="$HOME/.symfony/bin:$PATH"
fi

# set PATH so it includes user's flutter bin directory if it exists
if [ -d "$HOME/.flutter/bin" ]; then
    PATH="$HOME/.flutter/bin:$PATH"
fi

# set aliases
if [ -f ~/.aliases ]; then
    . ~/.aliases
fi

# set functions
if [ -f ~/.functions ]; then
    . ~/.functions
fi

# set local profile
if [ -f ~/.profile.local ]; then
    . ~/.profile.local
fi

# Set Editor to nvim
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='vi'
else
    export EDITOR='nvim'
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

## Docker Settings

# enable buildkit
export DOCKER_BUILDKIT=1

# use docker cli command to build with docker-compose -> buildkit
export COMPOSE_DOCKER_CLI_BUILD=1

# automatically set docker host if lima-vm is running
if [ -x "$(command -v limactl)" ]; then
    lima_docker_vm=$(limactl list --json 2>/dev/null | jq -r 'select(.message != null ) | select(.message | contains("docker")) | .name')
    if [ ! -z "$lima_docker_vm" ]; then
        export DOCKER_HOST=$(limactl list $lima_docker_vm --format 'unix://{{.Dir}}/sock/docker.sock')
    fi
fi

## GPG Settings
unset SSH_AGENT_PID
if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
    export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
fi
export GPG_TTY=$(tty)
gpgconf --launch gpg-agent

## Node.js Settings
export NODE_OPTIONS="--experimental-json-modules"

## Tmux Session Helper
bindkey -s ^f "tmux-sessionizer\n"
