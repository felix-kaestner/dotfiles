#!/usr/bin/env bash
# bootstrap: setup development environment using Ansible
# usage: bootstrap

DIR="$(dirname "$(dirname "$(realpath "$0")")")"

set -eu

ask() {
    printf "\r  [ \033[0;33m??\033[0m ] %s\n" "$1"
}

info() {
    printf "\r  [ \033[00;34m..\033[0m ] %s\n" "$1"
}

success() {
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] %s\n" "$1"
}

NAME=
MAIL=
SIGN_KEY=
SSH_KEYGRIP=

function generate_keys() {
    # shellcheck disable=SC2155
    export GPG_TTY=$(tty)

    info 'Generating GPG keys..'

    ask ' - Please provide your name.'
    read -re NAME

    ask ' - Please provide your email.'
    read -re MAIL

    info ' - Generate a Master GPG key..'
    gpg --quick-gen-key "${NAME} <${MAIL}>" ed25519 cert
    success 'GPG key generated.'

    info 'Retrieve Fingerprint..'
    FPR=$(gpg --with-colons --fingerprint "$NAME <$MAIL>" 2>/dev/null | awk -F: '$1 == "fpr" {print $10; exit}')
    success 'Fingerprint retrieved.'

    # Generate subkeys
    ask ' - Do you want to create a subkey for signing? (Y/n)'
    read -re REPLY
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        info 'Generate Signing Subkey..'
        gpg --quick-add-key "$FPR" ed25519 sign 1y
        success 'Signing Subkey generated.'

        SIGN_KEY=$(gpg --list-secret-keys --with-colons "$NAME <$MAIL>" 2>/dev/null | awk -F: '$1 == "ssb" && $12 == "s" {print $5; exit}')
    fi

    ask ' - Do you want to create a subkey for authentication? (Y/n)'
    read -re REPLY
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        info 'Generate Authentication Subkey..'
        gpg --quick-add-key "$FPR" ed25519 auth 1y
        success 'Authentication Subkey generated.'

        SSH_KEYGRIP=$(gpg --list-secret-keys --with-colons "$NAME <$MAIL>" 2>/dev/null | awk -F: '$1 == "ssb" && $12 == "a" {capture = 3} capture && capture-- == 1 {print $10; exit}')

        if [ ! -f "$DIR/roles/gpg/vars/local.yml" ]; then
            info "Create $DIR/roles/gpg/vars/local.yml.."

            cat <<EOF >"$DIR/roles/gpg/vars/local.yml"
---
ssh_keygrip: "$SSH_KEYGRIP"
EOF
        fi
    fi

    ask ' - Do you want to create a subkey for encryption? (Y/n)'
    read -re REPLY
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        info 'Generate Encryption Subkey.'
        gpg --quick-add-key "$FPR" cv25519 encr 1y
        success 'Encryption Subkey generated.'
    fi

    if [ ! -f "$DIR/roles/git/vars/local.yml" ]; then
        info "Create $DIR/roles/git/vars/local.yml.."

        cat <<EOF >"$DIR/roles/git/vars/local.yml"
---
git_name: "$NAME"
git_email: "$MAIL"
git_signingkey: "$SIGN_KEY"
EOF
    fi

    info 'Print Keys..'
    gpg --list-secret-keys --keyid-format LONG

    success 'Key(s) generated.'
}

ask ' - Do you want to create GPG key(s)? (Y/n)'
read -re KEY_GEN
if [[ $KEY_GEN =~ ^[Yy]$ ]]; then
    generate_keys
fi

if [ "$(uname -s)" == 'Darwin' ]; then
    # Install Xcode Command Line Tools
    if ! xcode-select -p &>/dev/null; then
        xcode-select --install
    fi

    # Install Rosetta 2
    if ! pkgutil --pkg-info=com.apple.pkg.RosettaUpdateAuto &>/dev/null; then
        softwareupdate --install-rosetta --agree-to-license
    fi

    if ! [ -x "$(command -v brew)" ] && ! [ -x "/opt/homebrew/bin/brew" ]; then
        bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi

    if [ -x "/opt/homebrew/bin/brew" ]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
fi

if [ -x "$(command -v python3)" ]; then
    PYTHON="python3"
elif [ -x "$(command -v python)" ] && "$(python --version 2>&1)" | grep -q "^Python 3"; then
    PYTHON="python"
else
    >&2 echo "No suitable Python 3.x interpreter found."
    exit 1
fi

if ! [ -x "$(command -v ansible)" ]; then
    VENV_PATH="$HOME/.venvs/ansible"

    if [ ! -d "$VENV_PATH" ]; then
        $PYTHON -m venv "$VENV_PATH"
    fi

    # shellcheck disable=SC1091
    . "$VENV_PATH/bin/activate"

    pip install -q -U pip ansible
fi

export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
export XDG_BIN_HOME="${XDG_BIN_HOME:-$HOME/.local/bin}"

ansible-playbook --ask-become-pass -i "$DIR/hosts" --extra-vars "ansible_python_interpreter=$PYTHON" "$DIR/playbook.yml"
