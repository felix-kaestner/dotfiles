# ~/.functions: set of predefined shell functions

keys() {
    gpg --list-secret-keys --keyid-format LONG
}

reloadgpg() {
    gpg-connect-agent updatestartuptty /bye >/dev/null
}

dind() {
    docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock:ro -v $(pwd):/workspace -w /workspace docker /bin/ash
}

dr() {
    docker run --rm -it -w /workspace -v $(pwd):/workspace $@
}

pr() {
    case $(git config --get remote.origin.url) in
        git@github.com*) gh pr create $@ ;;
        git@gitlab.com*) glab mr create $@ ;;
        *) ;;
    esac
}

wo() {
	[ -x "$(command -v timer)" ] || go install github.com/caarlos0/timer@latest
    timer 50m -n "Work"
    if [ $? = 0 ]; then
        case $(uname -s) in
        'Linux')
            [ -x "$(command -v notify-send)" ] && notify-send "Work Timer is up!" "Take a Break ðŸ˜Š"
            ;;
        'Darwin')
            osascript -e 'display notification with title "Work Timer is up!" subtitle "Take a Break ðŸ˜Š" sound name "Crystal"'
            ;;
        *) ;;
        esac
    fi
}

br() {
	[ -x "$(command -v timer)" ] || go install github.com/caarlos0/timer@latest
    timer 10m -n "Break"
    if [ $? = 0 ]; then
        case $(uname -s) in
        'Linux')
            [ -x "$(command -v notify-send)" ] && notify-send "Break is over!" "Get back to work ðŸ«¡"
            ;;
        'Darwin')
            osascript -e 'display notification with title "Break is over!" subtitle "Get back to work ðŸ«¡" sound name "Crystal"'
            ;;
        *) ;;
        esac
    fi
}

# vim: syn=sh ft=sh
