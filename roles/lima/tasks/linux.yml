---
- name: Find previous lima installation
  ansible.builtin.find:
    paths: "/usr/local"
    patterns: "**lima**"
    file_type: any
    recurse: true
  register: lima_files

- name: Remove existing lima installation
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ lima_files.files | map(attribute='path') }}"
  become: true

- name: Get latest Lima version
  ansible.builtin.uri:
    url: "https://api.github.com/repos/lima-vm/lima/releases/latest"
  register: lima_release

- name: Create temporary file
  ansible.builtin.tempfile:
    state: file
    prefix: lima
    suffix: ".tar.gz"
  register: lima_archive

- name: Download Lima
  ansible.builtin.get_url:
    url: "https://github.com/lima-vm/lima/releases/download/{{ lima_release.json.tag_name }}/lima-{{ lima_release.json.tag_name[1:] }}-{{ ansible_system }}-{{ ansible_architecture }}.tar.gz"
    dest: "{{ lima_archive.path }}"
    checksum: "sha256:https://github.com/lima-vm/lima/releases/download/{{ lima_release.json.tag_name }}/SHA256SUMS"

- name: Extract Lima
  ansible.builtin.unarchive:
    src: "{{ lima_archive.path }}"
    dest: "/usr/local"
    remote_src: true
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0755"
  become: true

- name: Remove temporary file
  ansible.builtin.file:
    path: "{{ lima_archive.path }}"
    state: absent
