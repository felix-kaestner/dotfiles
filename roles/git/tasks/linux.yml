---
- name: Set system architecture
  ansible.builtin.set_fact:
    gh_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture == 'aarch64' else ansible_architecture }}"

- name: Find previous gh installation
  ansible.builtin.find:
    paths: "/usr/local/share/man/man1"
    patterns: "gh[.-]*"
  register: gh_files

- name: Remove existing gh installation
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ gh_files.files | map(attribute='path') + ['/usr/local/bin/gh'] }}"
  become: true

- name: Get latest gh version
  ansible.builtin.uri:
    url: "https://api.github.com/repos/cli/cli/releases/latest"
  register: gh_release

- name: Create temporary file
  ansible.builtin.tempfile:
    state: file
    prefix: gh
    suffix: ".tar.gz"
  register: gh_archive

- name: Download gh
  ansible.builtin.get_url:
    url: "https://github.com/cli/cli/releases/download/{{ gh_release.json.tag_name }}/gh_{{ gh_release.json.tag_name[1:] }}_linux_{{ gh_arch }}.tar.gz"
    dest: "{{ gh_archive.path }}"
    checksum: "sha256:https://github.com/cli/cli/releases/download/{{ gh_release.json.tag_name }}/gh_{{ gh_release.json.tag_name[1:] }}_checksums.txt"

- name: Extract gh
  ansible.builtin.unarchive:
    src: "{{ gh_archive.path }}"
    dest: "/usr/local"
    remote_src: true
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0755"
    extra_opts:
      - "--strip-components=1"
    exclude:
      - "LICENSE"
  become: true

- name: Remove temporary file
  when: ansible_system == "Linux"
  ansible.builtin.file:
    path: "{{ gh_archive.path }}"
    state: absent
